/**
 * generated by Xtext 2.18.0.M3
 */
package no.hal.bdd.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import no.hal.bdd.bddDsl.ActionDef;
import no.hal.bdd.bddDsl.BddDslPackage;
import no.hal.bdd.bddDsl.EntityDef;
import no.hal.bdd.bddDsl.EntityRef;
import no.hal.bdd.bddDsl.Model;
import no.hal.bdd.bddDsl.ModelRef;
import no.hal.bdd.bddDsl.PropertyDef;
import no.hal.bdd.bddDsl.StateName;
import no.hal.bdd.scoping.AbstractBddDslScopeProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class BddDslScopeProvider extends AbstractBddDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    EClassifier _eType = reference.getEType();
    EClass _stateName = BddDslPackage.eINSTANCE.getStateName();
    boolean _equals = Objects.equal(_eType, _stateName);
    if (_equals) {
      _xifexpression = this.<StateName>scopeForEntityModelElements(context, StateName.class);
    } else {
      IScope _xifexpression_1 = null;
      EClassifier _eType_1 = reference.getEType();
      EClass _actionDef = BddDslPackage.eINSTANCE.getActionDef();
      boolean _equals_1 = Objects.equal(_eType_1, _actionDef);
      if (_equals_1) {
        _xifexpression_1 = this.<ActionDef>scopeForEntityModelElements(context, ActionDef.class);
      } else {
        IScope _xifexpression_2 = null;
        EClassifier _eType_2 = reference.getEType();
        EClass _propertyDef = BddDslPackage.eINSTANCE.getPropertyDef();
        boolean _equals_2 = Objects.equal(_eType_2, _propertyDef);
        if (_equals_2) {
          _xifexpression_2 = this.<PropertyDef>scopeForEntityModelElements(context, PropertyDef.class);
        } else {
          IScope _xifexpression_3 = null;
          EClassifier _eType_3 = reference.getEType();
          EClass _entityDef = BddDslPackage.eINSTANCE.getEntityDef();
          boolean _equals_3 = Objects.equal(_eType_3, _entityDef);
          if (_equals_3) {
            _xifexpression_3 = Scopes.scopeFor(this.getAllEntityDefs(this.<Model>findAncestorOfType(context, Model.class)));
          } else {
            _xifexpression_3 = super.getScope(context, reference);
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public Iterable<? extends EntityDef> getAllEntityDefs(final Model model) {
    ArrayList<EntityDef> _xblockexpression = null;
    {
      final ArrayList<EntityDef> allEntityDefs = CollectionLiterals.<EntityDef>newArrayList();
      EList<EntityDef> _entityDefs = model.getEntityDefs();
      Iterables.<EntityDef>addAll(allEntityDefs, _entityDefs);
      EList<ModelRef> _modelRefs = model.getModelRefs();
      for (final ModelRef modelRef : _modelRefs) {
        Iterable<? extends EntityDef> _allEntityDefs = this.getAllEntityDefs(modelRef.getModelRef());
        Iterables.<EntityDef>addAll(allEntityDefs, _allEntityDefs);
      }
      _xblockexpression = allEntityDefs;
    }
    return _xblockexpression;
  }
  
  public <T extends EObject> IScope scopeForEntityModelElements(final EObject context, final Class<T> clazz) {
    IScope _xblockexpression = null;
    {
      final ArrayList<T> allModelElements = CollectionLiterals.<T>newArrayList();
      final ArrayList<EntityDef> entityDefs = CollectionLiterals.<EntityDef>newArrayList();
      final EntityDef contextEntityDef = this.findWEntityDef(context);
      if ((contextEntityDef != null)) {
        entityDefs.add(contextEntityDef);
      } else {
        Iterable<? extends EntityDef> _allEntityDefs = this.getAllEntityDefs(this.<Model>findAncestorOfType(context, Model.class));
        Iterables.<EntityDef>addAll(entityDefs, _allEntityDefs);
      }
      for (final EntityDef entityDef : entityDefs) {
        Iterable<T> _allInheritedContentsOfType = this.<T>getAllInheritedContentsOfType(entityDef, clazz);
        for (final T modelElement : _allInheritedContentsOfType) {
          allModelElements.add(modelElement);
        }
      }
      _xblockexpression = Scopes.scopeFor(allModelElements);
    }
    return _xblockexpression;
  }
  
  public <T extends EObject> Iterable<T> getAllInheritedContentsOfType(final EntityDef entityDef, final Class<T> clazz) {
    Iterable<T> _xblockexpression = null;
    {
      final ArrayList<T> all = CollectionLiterals.<T>newArrayList();
      List<T> _allContentsOfType = EcoreUtil2.<T>getAllContentsOfType(entityDef, clazz);
      Iterables.<T>addAll(all, _allContentsOfType);
      final Consumer<EntityDef> _function = (EntityDef it) -> {
        Iterable<T> _allInheritedContentsOfType = this.<T>getAllInheritedContentsOfType(it, clazz);
        Iterables.<T>addAll(all, _allInheritedContentsOfType);
      };
      entityDef.getSuperEntities().forEach(_function);
      final Function1<T, Boolean> _function_1 = (T it) -> {
        return Boolean.valueOf(clazz.isInstance(it));
      };
      _xblockexpression = IterableExtensions.<T>filter(all, _function_1);
    }
    return _xblockexpression;
  }
  
  public <T extends Object> T findAncestorOfType(final EObject context, final Class<T> clazz) {
    EObject parent = context;
    while ((parent != null)) {
      {
        boolean _isInstance = clazz.isInstance(parent);
        if (_isInstance) {
          return ((T) parent);
        }
        parent = parent.eContainer();
      }
    }
    return null;
  }
  
  public EntityDef findWEntityDef(final EObject context) {
    EntityDef _xblockexpression = null;
    {
      final Function1<EStructuralFeature, Boolean> _function = (EStructuralFeature it) -> {
        EClassifier _eType = it.getEType();
        EClass _entityRef = BddDslPackage.eINSTANCE.getEntityRef();
        return Boolean.valueOf(Objects.equal(_eType, _entityRef));
      };
      final EStructuralFeature feature = IterableExtensions.<EStructuralFeature>findFirst(context.eClass().getEAllStructuralFeatures(), _function);
      EntityDef _xifexpression = null;
      if ((feature != null)) {
        Object _eGet = context.eGet(feature);
        EntityDef _entity = null;
        if (((EntityRef) _eGet)!=null) {
          _entity=((EntityRef) _eGet).getEntity();
        }
        _xifexpression = _entity;
      } else {
        _xifexpression = null;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
}
