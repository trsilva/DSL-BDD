/*
 * generated by Xtext 2.19.0
 */
package no.hal.bdd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BddDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cModelRefsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cModelRefsModelRefParserRuleCall_1_0_0 = (RuleCall)cModelRefsAssignment_1_0.eContents().get(0);
		private final Assignment cEntityDefsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cEntityDefsEntityDefParserRuleCall_1_1_0 = (RuleCall)cEntityDefsAssignment_1_1.eContents().get(0);
		private final Assignment cScenariosAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cScenariosScenarioParserRuleCall_1_2_0 = (RuleCall)cScenariosAssignment_1_2.eContents().get(0);
		
		//Model:
		//	('model' name=ID) (modelRefs+=ModelRef | entityDefs+=EntityDef | scenarios+=Scenario)*;
		@Override public ParserRule getRule() { return rule; }
		
		//('model' name=ID) (modelRefs+=ModelRef | entityDefs+=EntityDef | scenarios+=Scenario)*
		public Group getGroup() { return cGroup; }
		
		//('model' name=ID)
		public Group getGroup_0() { return cGroup_0; }
		
		//'model'
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//(modelRefs+=ModelRef | entityDefs+=EntityDef | scenarios+=Scenario)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//modelRefs+=ModelRef
		public Assignment getModelRefsAssignment_1_0() { return cModelRefsAssignment_1_0; }
		
		//ModelRef
		public RuleCall getModelRefsModelRefParserRuleCall_1_0_0() { return cModelRefsModelRefParserRuleCall_1_0_0; }
		
		//entityDefs+=EntityDef
		public Assignment getEntityDefsAssignment_1_1() { return cEntityDefsAssignment_1_1; }
		
		//EntityDef
		public RuleCall getEntityDefsEntityDefParserRuleCall_1_1_0() { return cEntityDefsEntityDefParserRuleCall_1_1_0; }
		
		//scenarios+=Scenario
		public Assignment getScenariosAssignment_1_2() { return cScenariosAssignment_1_2; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_1_2_0() { return cScenariosScenarioParserRuleCall_1_2_0; }
	}
	public class ModelRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ModelRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelRefModelCrossReference_1_0 = (CrossReference)cModelRefAssignment_1.eContents().get(0);
		private final RuleCall cModelRefModelIDTerminalRuleCall_1_0_1 = (RuleCall)cModelRefModelCrossReference_1_0.eContents().get(1);
		
		//ModelRef:
		//	'using' modelRef=[Model];
		@Override public ParserRule getRule() { return rule; }
		
		//'using' modelRef=[Model]
		public Group getGroup() { return cGroup; }
		
		//'using'
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }
		
		//modelRef=[Model]
		public Assignment getModelRefAssignment_1() { return cModelRefAssignment_1; }
		
		//[Model]
		public CrossReference getModelRefModelCrossReference_1_0() { return cModelRefModelCrossReference_1_0; }
		
		//ID
		public RuleCall getModelRefModelIDTerminalRuleCall_1_0_1() { return cModelRefModelIDTerminalRuleCall_1_0_1; }
	}
	public class EntityDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.EntityDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperEntitiesEntityDefCrossReference_2_1_0 = (CrossReference)cSuperEntitiesAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperEntitiesEntityDefIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperEntitiesEntityDefCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cSuperEntitiesEntityDefCrossReference_2_2_1_0 = (CrossReference)cSuperEntitiesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cSuperEntitiesEntityDefIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cSuperEntitiesEntityDefCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cActionsActionDefParserRuleCall_4_1_0 = (RuleCall)cActionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cActionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cActionsActionDefParserRuleCall_4_2_1_0 = (RuleCall)cActionsAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cStatesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStatesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatesStateDefParserRuleCall_5_1_0 = (RuleCall)cStatesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cStatesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cStatesStateDefParserRuleCall_5_2_1_0 = (RuleCall)cStatesAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPropertiesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPropertiesPropertyDefParserRuleCall_6_1_0 = (RuleCall)cPropertiesAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cPropertiesPropertyDefParserRuleCall_6_2_1_0 = (RuleCall)cPropertiesAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EntityDef:
		//	'entity' name=(ID | STRING) ('is' superEntities+=[EntityDef] (',' superEntities+=[EntityDef])*)? '{' ('actions:'
		//	actions+=ActionDef (',' actions+=ActionDef)*)? ('states:' states+=StateDef (',' states+=StateDef)*)? ('properties:'
		//	properties+=PropertyDef (',' properties+=PropertyDef)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=(ID | STRING) ('is' superEntities+=[EntityDef] (',' superEntities+=[EntityDef])*)? '{' ('actions:'
		//actions+=ActionDef (',' actions+=ActionDef)*)? ('states:' states+=StateDef (',' states+=StateDef)*)? ('properties:'
		//properties+=PropertyDef (',' properties+=PropertyDef)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=(ID | STRING)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | STRING)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }
		
		//('is' superEntities+=[EntityDef] (',' superEntities+=[EntityDef])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'is'
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//superEntities+=[EntityDef]
		public Assignment getSuperEntitiesAssignment_2_1() { return cSuperEntitiesAssignment_2_1; }
		
		//[EntityDef]
		public CrossReference getSuperEntitiesEntityDefCrossReference_2_1_0() { return cSuperEntitiesEntityDefCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesEntityDefIDTerminalRuleCall_2_1_0_1() { return cSuperEntitiesEntityDefIDTerminalRuleCall_2_1_0_1; }
		
		//(',' superEntities+=[EntityDef])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//superEntities+=[EntityDef]
		public Assignment getSuperEntitiesAssignment_2_2_1() { return cSuperEntitiesAssignment_2_2_1; }
		
		//[EntityDef]
		public CrossReference getSuperEntitiesEntityDefCrossReference_2_2_1_0() { return cSuperEntitiesEntityDefCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesEntityDefIDTerminalRuleCall_2_2_1_0_1() { return cSuperEntitiesEntityDefIDTerminalRuleCall_2_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('actions:' actions+=ActionDef (',' actions+=ActionDef)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'actions:'
		public Keyword getActionsKeyword_4_0() { return cActionsKeyword_4_0; }
		
		//actions+=ActionDef
		public Assignment getActionsAssignment_4_1() { return cActionsAssignment_4_1; }
		
		//ActionDef
		public RuleCall getActionsActionDefParserRuleCall_4_1_0() { return cActionsActionDefParserRuleCall_4_1_0; }
		
		//(',' actions+=ActionDef)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//actions+=ActionDef
		public Assignment getActionsAssignment_4_2_1() { return cActionsAssignment_4_2_1; }
		
		//ActionDef
		public RuleCall getActionsActionDefParserRuleCall_4_2_1_0() { return cActionsActionDefParserRuleCall_4_2_1_0; }
		
		//('states:' states+=StateDef (',' states+=StateDef)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'states:'
		public Keyword getStatesKeyword_5_0() { return cStatesKeyword_5_0; }
		
		//states+=StateDef
		public Assignment getStatesAssignment_5_1() { return cStatesAssignment_5_1; }
		
		//StateDef
		public RuleCall getStatesStateDefParserRuleCall_5_1_0() { return cStatesStateDefParserRuleCall_5_1_0; }
		
		//(',' states+=StateDef)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//states+=StateDef
		public Assignment getStatesAssignment_5_2_1() { return cStatesAssignment_5_2_1; }
		
		//StateDef
		public RuleCall getStatesStateDefParserRuleCall_5_2_1_0() { return cStatesStateDefParserRuleCall_5_2_1_0; }
		
		//('properties:' properties+=PropertyDef (',' properties+=PropertyDef)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_6_0() { return cPropertiesKeyword_6_0; }
		
		//properties+=PropertyDef
		public Assignment getPropertiesAssignment_6_1() { return cPropertiesAssignment_6_1; }
		
		//PropertyDef
		public RuleCall getPropertiesPropertyDefParserRuleCall_6_1_0() { return cPropertiesPropertyDefParserRuleCall_6_1_0; }
		
		//(',' properties+=PropertyDef)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//properties+=PropertyDef
		public Assignment getPropertiesAssignment_6_2_1() { return cPropertiesAssignment_6_2_1; }
		
		//PropertyDef
		public RuleCall getPropertiesPropertyDefParserRuleCall_6_2_1_0() { return cPropertiesPropertyDefParserRuleCall_6_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ActionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ActionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWORDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentWORDParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cPrepositionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cPrepositionPREPParserRuleCall_2_0_0 = (RuleCall)cPrepositionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOptionalPrefAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cOptionalPrefLeftSquareBracketKeyword_2_1_0_0 = (Keyword)cOptionalPrefAssignment_2_1_0.eContents().get(0);
		private final Assignment cPrepositionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPrepositionPREPParserRuleCall_2_1_1_0 = (RuleCall)cPrepositionAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ActionDef:
		//	name=WORD argument=WORD? (preposition=PREP? | optionalPref?='[' preposition=PREP ']');
		@Override public ParserRule getRule() { return rule; }
		
		//name=WORD argument=WORD? (preposition=PREP? | optionalPref?='[' preposition=PREP ']')
		public Group getGroup() { return cGroup; }
		
		//name=WORD
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//WORD
		public RuleCall getNameWORDParserRuleCall_0_0() { return cNameWORDParserRuleCall_0_0; }
		
		//argument=WORD?
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//WORD
		public RuleCall getArgumentWORDParserRuleCall_1_0() { return cArgumentWORDParserRuleCall_1_0; }
		
		//(preposition=PREP? | optionalPref?='[' preposition=PREP ']')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//preposition=PREP?
		public Assignment getPrepositionAssignment_2_0() { return cPrepositionAssignment_2_0; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_2_0_0() { return cPrepositionPREPParserRuleCall_2_0_0; }
		
		//optionalPref?='[' preposition=PREP ']'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//optionalPref?='['
		public Assignment getOptionalPrefAssignment_2_1_0() { return cOptionalPrefAssignment_2_1_0; }
		
		//'['
		public Keyword getOptionalPrefLeftSquareBracketKeyword_2_1_0_0() { return cOptionalPrefLeftSquareBracketKeyword_2_1_0_0; }
		
		//preposition=PREP
		public Assignment getPrepositionAssignment_2_1_1() { return cPrepositionAssignment_2_1_1; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_2_1_1_0() { return cPrepositionPREPParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }
	}
	public class PREPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.PREP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntoKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//PREP:
		//	'on' | 'in' | 'from' | 'to' | 'into';
		@Override public ParserRule getRule() { return rule; }
		
		//'on' | 'in' | 'from' | 'to' | 'into'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//'into'
		public Keyword getIntoKeyword_4() { return cIntoKeyword_4; }
	}
	public class WORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.WORD");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//WORD:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class StateDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.StateDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPostiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPostiveStateNameParserRuleCall_0_0 = (RuleCall)cPostiveAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNegativeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNegativeStateNameParserRuleCall_1_1_0 = (RuleCall)cNegativeAssignment_1_1.eContents().get(0);
		
		//StateDef:
		//	postive=StateName ('/' negative=StateName)?;
		@Override public ParserRule getRule() { return rule; }
		
		//postive=StateName ('/' negative=StateName)?
		public Group getGroup() { return cGroup; }
		
		//postive=StateName
		public Assignment getPostiveAssignment_0() { return cPostiveAssignment_0; }
		
		//StateName
		public RuleCall getPostiveStateNameParserRuleCall_0_0() { return cPostiveStateNameParserRuleCall_0_0; }
		
		//('/' negative=StateName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//negative=StateName
		public Assignment getNegativeAssignment_1_1() { return cNegativeAssignment_1_1; }
		
		//StateName
		public RuleCall getNegativeStateNameParserRuleCall_1_1_0() { return cNegativeStateNameParserRuleCall_1_1_0; }
	}
	public class StateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.StateName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameWORDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StateName:
		//	name=WORD;
		@Override public ParserRule getRule() { return rule; }
		
		//name=WORD
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//WORD
		public RuleCall getNameWORDParserRuleCall_0() { return cNameWORDParserRuleCall_0; }
	}
	public class PropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.PropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWORDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPluralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPluralAsteriskKeyword_1_0 = (Keyword)cPluralAssignment_1.eContents().get(0);
		
		//PropertyDef:
		//	name=WORD plural?='*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=WORD plural?='*'?
		public Group getGroup() { return cGroup; }
		
		//name=WORD
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//WORD
		public RuleCall getNameWORDParserRuleCall_0_0() { return cNameWORDParserRuleCall_0_0; }
		
		//plural?='*'?
		public Assignment getPluralAssignment_1() { return cPluralAssignment_1; }
		
		//'*'
		public Keyword getPluralAsteriskKeyword_1_0() { return cPluralAsteriskKeyword_1_0; }
	}
	public class ID_OR_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ID_OR_STRING");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////
		//ID_OR_STRING:
		//	ID | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_OR_STRINGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGivenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPreStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPreStateScenarioStateParserRuleCall_3_0 = (RuleCall)cPreStateAssignment_3.eContents().get(0);
		private final Keyword cWhenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionScenarioActionParserRuleCall_6_0 = (RuleCall)cActionAssignment_6.eContents().get(0);
		private final Keyword cThenKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPostStateAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPostStateScenarioStateParserRuleCall_8_0 = (RuleCall)cPostStateAssignment_8.eContents().get(0);
		
		//Scenario:
		//	'Scenario:' name=ID_OR_STRING
		//	'given' preState=ScenarioState
		//	'when' 'I' action=ScenarioAction
		//	'then' postState=ScenarioState;
		@Override public ParserRule getRule() { return rule; }
		
		//'Scenario:' name=ID_OR_STRING 'given' preState=ScenarioState 'when' 'I' action=ScenarioAction 'then'
		//postState=ScenarioState
		public Group getGroup() { return cGroup; }
		
		//'Scenario:'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//name=ID_OR_STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID_OR_STRING
		public RuleCall getNameID_OR_STRINGParserRuleCall_1_0() { return cNameID_OR_STRINGParserRuleCall_1_0; }
		
		//'given'
		public Keyword getGivenKeyword_2() { return cGivenKeyword_2; }
		
		//preState=ScenarioState
		public Assignment getPreStateAssignment_3() { return cPreStateAssignment_3; }
		
		//ScenarioState
		public RuleCall getPreStateScenarioStateParserRuleCall_3_0() { return cPreStateScenarioStateParserRuleCall_3_0; }
		
		//'when'
		public Keyword getWhenKeyword_4() { return cWhenKeyword_4; }
		
		//'I'
		public Keyword getIKeyword_5() { return cIKeyword_5; }
		
		//action=ScenarioAction
		public Assignment getActionAssignment_6() { return cActionAssignment_6; }
		
		//ScenarioAction
		public RuleCall getActionScenarioActionParserRuleCall_6_0() { return cActionScenarioActionParserRuleCall_6_0; }
		
		//'then'
		public Keyword getThenKeyword_7() { return cThenKeyword_7; }
		
		//postState=ScenarioState
		public Assignment getPostStateAssignment_8() { return cPostStateAssignment_8; }
		
		//ScenarioState
		public RuleCall getPostStateScenarioStateParserRuleCall_8_0() { return cPostStateScenarioStateParserRuleCall_8_0; }
	}
	public class ScenarioStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ScenarioState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatesStatePhraseParserRuleCall_0_0 = (RuleCall)cStatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatesStatePhraseParserRuleCall_1_1_0 = (RuleCall)cStatesAssignment_1_1.eContents().get(0);
		
		//ScenarioState:
		//	states+=StatePhrase ('and' states+=StatePhrase)*;
		@Override public ParserRule getRule() { return rule; }
		
		//states+=StatePhrase ('and' states+=StatePhrase)*
		public Group getGroup() { return cGroup; }
		
		//states+=StatePhrase
		public Assignment getStatesAssignment_0() { return cStatesAssignment_0; }
		
		//StatePhrase
		public RuleCall getStatesStatePhraseParserRuleCall_0_0() { return cStatesStatePhraseParserRuleCall_0_0; }
		
		//('and' states+=StatePhrase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//states+=StatePhrase
		public Assignment getStatesAssignment_1_1() { return cStatesAssignment_1_1; }
		
		//StatePhrase
		public RuleCall getStatesStatePhraseParserRuleCall_1_1_0() { return cStatesStatePhraseParserRuleCall_1_1_0; }
	}
	public class ScenarioActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ScenarioAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionsActionPhraseParserRuleCall_0_0 = (RuleCall)cActionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionsActionPhraseParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		
		//ScenarioAction:
		//	actions+=ActionPhrase ('and' actions+=ActionPhrase)*;
		@Override public ParserRule getRule() { return rule; }
		
		//actions+=ActionPhrase ('and' actions+=ActionPhrase)*
		public Group getGroup() { return cGroup; }
		
		//actions+=ActionPhrase
		public Assignment getActionsAssignment_0() { return cActionsAssignment_0; }
		
		//ActionPhrase
		public RuleCall getActionsActionPhraseParserRuleCall_0_0() { return cActionsActionPhraseParserRuleCall_0_0; }
		
		//('and' actions+=ActionPhrase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//actions+=ActionPhrase
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }
		
		//ActionPhrase
		public RuleCall getActionsActionPhraseParserRuleCall_1_1_0() { return cActionsActionPhraseParserRuleCall_1_1_0; }
	}
	public class StatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.StatePhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScenarioRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityPropertyStatePhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntityStatePhraseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StatePhrase:
		//	ScenarioRef | EntityPropertyStatePhrase | EntityStatePhrase;
		@Override public ParserRule getRule() { return rule; }
		
		//ScenarioRef | EntityPropertyStatePhrase | EntityStatePhrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ScenarioRef
		public RuleCall getScenarioRefParserRuleCall_0() { return cScenarioRefParserRuleCall_0; }
		
		//EntityPropertyStatePhrase
		public RuleCall getEntityPropertyStatePhraseParserRuleCall_1() { return cEntityPropertyStatePhraseParserRuleCall_1; }
		
		//EntityStatePhrase
		public RuleCall getEntityStatePhraseParserRuleCall_2() { return cEntityStatePhraseParserRuleCall_2; }
	}
	public class ScenarioRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ScenarioRef");
		private final Assignment cScenarioRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cScenarioRefScenarioCrossReference_0 = (CrossReference)cScenarioRefAssignment.eContents().get(0);
		private final RuleCall cScenarioRefScenarioID_OR_STRINGParserRuleCall_0_1 = (RuleCall)cScenarioRefScenarioCrossReference_0.eContents().get(1);
		
		//ScenarioRef:
		//	scenarioRef=[Scenario|ID_OR_STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//scenarioRef=[Scenario|ID_OR_STRING]
		public Assignment getScenarioRefAssignment() { return cScenarioRefAssignment; }
		
		//[Scenario|ID_OR_STRING]
		public CrossReference getScenarioRefScenarioCrossReference_0() { return cScenarioRefScenarioCrossReference_0; }
		
		//ID_OR_STRING
		public RuleCall getScenarioRefScenarioID_OR_STRINGParserRuleCall_0_1() { return cScenarioRefScenarioID_OR_STRINGParserRuleCall_0_1; }
	}
	public class ENTITY_IDENTITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ENTITY_IDENTITY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//ENTITY_IDENTITY:
		//	'#'? (INT | STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//'#'? (INT | STRING)
		public Group getGroup() { return cGroup; }
		
		//'#'?
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//(INT | STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}
	public class EntityRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.EntityRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEntityAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cEntityEntityDefCrossReference_0_1_0 = (CrossReference)cEntityAssignment_0_1.eContents().get(0);
		private final RuleCall cEntityEntityDefWORDParserRuleCall_0_1_0_1 = (RuleCall)cEntityEntityDefCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameENTITY_IDENTITYParserRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameENTITY_IDENTITYParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EntityRef:
		//	'the' entity=[EntityDef|WORD] name=ENTITY_IDENTITY | name=ENTITY_IDENTITY;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' entity=[EntityDef|WORD] name=ENTITY_IDENTITY | name=ENTITY_IDENTITY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'the' entity=[EntityDef|WORD] name=ENTITY_IDENTITY
		public Group getGroup_0() { return cGroup_0; }
		
		//'the'
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }
		
		//entity=[EntityDef|WORD]
		public Assignment getEntityAssignment_0_1() { return cEntityAssignment_0_1; }
		
		//[EntityDef|WORD]
		public CrossReference getEntityEntityDefCrossReference_0_1_0() { return cEntityEntityDefCrossReference_0_1_0; }
		
		//WORD
		public RuleCall getEntityEntityDefWORDParserRuleCall_0_1_0_1() { return cEntityEntityDefWORDParserRuleCall_0_1_0_1; }
		
		//name=ENTITY_IDENTITY
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ENTITY_IDENTITY
		public RuleCall getNameENTITY_IDENTITYParserRuleCall_0_2_0() { return cNameENTITY_IDENTITYParserRuleCall_0_2_0; }
		
		//name=ENTITY_IDENTITY
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ENTITY_IDENTITY
		public RuleCall getNameENTITY_IDENTITYParserRuleCall_1_0() { return cNameENTITY_IDENTITYParserRuleCall_1_0; }
	}
	public class EntityStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.EntityStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateNameCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateNameWORDParserRuleCall_2_0_1 = (RuleCall)cStateStateNameCrossReference_2_0.eContents().get(1);
		
		//EntityStatePhrase:
		//	entity=EntityRef 'is' state=[StateName|WORD];
		@Override public ParserRule getRule() { return rule; }
		
		//entity=EntityRef 'is' state=[StateName|WORD]
		public Group getGroup() { return cGroup; }
		
		//entity=EntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//EntityRef
		public RuleCall getEntityEntityRefParserRuleCall_0_0() { return cEntityEntityRefParserRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//state=[StateName|WORD]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[StateName|WORD]
		public CrossReference getStateStateNameCrossReference_2_0() { return cStateStateNameCrossReference_2_0; }
		
		//WORD
		public RuleCall getStateStateNameWORDParserRuleCall_2_0_1() { return cStateStateNameWORDParserRuleCall_2_0_1; }
	}
	public class EntityPropertyStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.EntityPropertyStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPropertyPropertyDefCrossReference_1_0 = (CrossReference)cPropertyAssignment_1.eContents().get(0);
		private final RuleCall cPropertyPropertyDefWORDParserRuleCall_1_0_1 = (RuleCall)cPropertyPropertyDefCrossReference_1_0.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntityEntityRefParserRuleCall_3_0 = (RuleCall)cEntityAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cIsKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cValueAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cValuePropertyValueParserRuleCall_4_0_1_0 = (RuleCall)cValueAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cAreKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cValuesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cValuesPropertyValueParserRuleCall_4_1_1_0 = (RuleCall)cValuesAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cValuesAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cValuesPropertyValueParserRuleCall_4_1_2_1_0 = (RuleCall)cValuesAssignment_4_1_2_1.eContents().get(0);
		
		//EntityPropertyStatePhrase:
		//	'the' property=[PropertyDef|WORD] 'of' entity=EntityRef ('is' value=PropertyValue | 'are' values+=PropertyValue (','
		//	values+=PropertyValue)*);
		@Override public ParserRule getRule() { return rule; }
		
		//'the' property=[PropertyDef|WORD] 'of' entity=EntityRef ('is' value=PropertyValue | 'are' values+=PropertyValue (','
		//values+=PropertyValue)*)
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//property=[PropertyDef|WORD]
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//[PropertyDef|WORD]
		public CrossReference getPropertyPropertyDefCrossReference_1_0() { return cPropertyPropertyDefCrossReference_1_0; }
		
		//WORD
		public RuleCall getPropertyPropertyDefWORDParserRuleCall_1_0_1() { return cPropertyPropertyDefWORDParserRuleCall_1_0_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//entity=EntityRef
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }
		
		//EntityRef
		public RuleCall getEntityEntityRefParserRuleCall_3_0() { return cEntityEntityRefParserRuleCall_3_0; }
		
		//('is' value=PropertyValue | 'are' values+=PropertyValue (',' values+=PropertyValue)*)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'is' value=PropertyValue
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'is'
		public Keyword getIsKeyword_4_0_0() { return cIsKeyword_4_0_0; }
		
		//value=PropertyValue
		public Assignment getValueAssignment_4_0_1() { return cValueAssignment_4_0_1; }
		
		//PropertyValue
		public RuleCall getValuePropertyValueParserRuleCall_4_0_1_0() { return cValuePropertyValueParserRuleCall_4_0_1_0; }
		
		//'are' values+=PropertyValue (',' values+=PropertyValue)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'are'
		public Keyword getAreKeyword_4_1_0() { return cAreKeyword_4_1_0; }
		
		//values+=PropertyValue
		public Assignment getValuesAssignment_4_1_1() { return cValuesAssignment_4_1_1; }
		
		//PropertyValue
		public RuleCall getValuesPropertyValueParserRuleCall_4_1_1_0() { return cValuesPropertyValueParserRuleCall_4_1_1_0; }
		
		//(',' values+=PropertyValue)*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }
		
		//','
		public Keyword getCommaKeyword_4_1_2_0() { return cCommaKeyword_4_1_2_0; }
		
		//values+=PropertyValue
		public Assignment getValuesAssignment_4_1_2_1() { return cValuesAssignment_4_1_2_1; }
		
		//PropertyValue
		public RuleCall getValuesPropertyValueParserRuleCall_4_1_2_1_0() { return cValuesPropertyValueParserRuleCall_4_1_2_1_0; }
	}
	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.PropertyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PropertyValue:
		//	SimpleValue | ListValue | SetValue;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleValue | ListValue | SetValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleValue
		public RuleCall getSimpleValueParserRuleCall_0() { return cSimpleValueParserRuleCall_0; }
		
		//ListValue
		public RuleCall getListValueParserRuleCall_1() { return cListValueParserRuleCall_1; }
		
		//SetValue
		public RuleCall getSetValueParserRuleCall_2() { return cSetValueParserRuleCall_2; }
	}
	public class SimpleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.SimpleValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleValue:
		//	IntValue | BooleanValue | StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | BooleanValue | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_1() { return cBooleanValueParserRuleCall_1; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
	}
	public class ListValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ListValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesSimpleValueParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesSimpleValueParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListValue:
		//	{ListValue} '[' (values+=SimpleValue (',' values+=SimpleValue)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListValue} '[' (values+=SimpleValue (',' values+=SimpleValue)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{ListValue}
		public Action getListValueAction_0() { return cListValueAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(values+=SimpleValue (',' values+=SimpleValue)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=SimpleValue
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//SimpleValue
		public RuleCall getValuesSimpleValueParserRuleCall_2_0_0() { return cValuesSimpleValueParserRuleCall_2_0_0; }
		
		//(',' values+=SimpleValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=SimpleValue
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//SimpleValue
		public RuleCall getValuesSimpleValueParserRuleCall_2_1_1_0() { return cValuesSimpleValueParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class SetValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.SetValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesSimpleValueParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesSimpleValueParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetValue:
		//	{SetValue} '{' (values+=SimpleValue (',' values+=SimpleValue)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SetValue} '{' (values+=SimpleValue (',' values+=SimpleValue)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SetValue}
		public Action getSetValueAction_0() { return cSetValueAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(values+=SimpleValue (',' values+=SimpleValue)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=SimpleValue
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//SimpleValue
		public RuleCall getValuesSimpleValueParserRuleCall_2_0_0() { return cValuesSimpleValueParserRuleCall_2_0_0; }
		
		//(',' values+=SimpleValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=SimpleValue
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//SimpleValue
		public RuleCall getValuesSimpleValueParserRuleCall_2_1_1_0() { return cValuesSimpleValueParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class TRUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.TRUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cYesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TRUE:
		//	'true' | 'yes';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'yes'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'yes'
		public Keyword getYesKeyword_1() { return cYesKeyword_1; }
	}
	public class FALSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.FALSE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFalseKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FALSE:
		//	'false' | 'no';
		@Override public ParserRule getRule() { return rule; }
		
		//'false' | 'no'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'false'
		public Keyword getFalseKeyword_0() { return cFalseKeyword_0; }
		
		//'no'
		public Keyword getNoKeyword_1() { return cNoKeyword_1; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueTRUEParserRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueFALSEParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//	value=(TRUE | FALSE);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(TRUE | FALSE)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(TRUE | FALSE)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//TRUE
		public RuleCall getValueTRUEParserRuleCall_0_0() { return cValueTRUEParserRuleCall_0_0; }
		
		//FALSE
		public RuleCall getValueFALSEParserRuleCall_0_1() { return cValueFALSEParserRuleCall_0_1; }
	}
	public class ActionPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ActionPhrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVerbActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVerifyActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActionPhrase:
		//	VerbAction | VerifyAction;
		@Override public ParserRule getRule() { return rule; }
		
		//VerbAction | VerifyAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VerbAction
		public RuleCall getVerbActionParserRuleCall_0() { return cVerbActionParserRuleCall_0; }
		
		//VerifyAction
		public RuleCall getVerifyActionParserRuleCall_1() { return cVerifyActionParserRuleCall_1; }
	}
	public class VerbActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.VerbAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionRefParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntityEntityRefParserRuleCall_1_0 = (RuleCall)cEntityAssignment_1.eContents().get(0);
		
		//VerbAction:
		//	action=ActionRef entity=EntityRef;
		@Override public ParserRule getRule() { return rule; }
		
		//action=ActionRef entity=EntityRef
		public Group getGroup() { return cGroup; }
		
		//action=ActionRef
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//ActionRef
		public RuleCall getActionActionRefParserRuleCall_0_0() { return cActionActionRefParserRuleCall_0_0; }
		
		//entity=EntityRef
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//EntityRef
		public RuleCall getEntityEntityRefParserRuleCall_1_0() { return cEntityEntityRefParserRuleCall_1_0; }
	}
	public class ActionRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.ActionRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerbAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVerbActionDefCrossReference_0_0 = (CrossReference)cVerbAssignment_0.eContents().get(0);
		private final RuleCall cVerbActionDefWORDParserRuleCall_0_0_1 = (RuleCall)cVerbActionDefCrossReference_0_0.eContents().get(1);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentPropertyValueParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		private final Assignment cPrepositionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrepositionPREPParserRuleCall_2_0 = (RuleCall)cPrepositionAssignment_2.eContents().get(0);
		
		//ActionRef:
		//	verb=[ActionDef|WORD] argument=PropertyValue? preposition=PREP?;
		@Override public ParserRule getRule() { return rule; }
		
		//verb=[ActionDef|WORD] argument=PropertyValue? preposition=PREP?
		public Group getGroup() { return cGroup; }
		
		//verb=[ActionDef|WORD]
		public Assignment getVerbAssignment_0() { return cVerbAssignment_0; }
		
		//[ActionDef|WORD]
		public CrossReference getVerbActionDefCrossReference_0_0() { return cVerbActionDefCrossReference_0_0; }
		
		//WORD
		public RuleCall getVerbActionDefWORDParserRuleCall_0_0_1() { return cVerbActionDefWORDParserRuleCall_0_0_1; }
		
		//argument=PropertyValue?
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//PropertyValue
		public RuleCall getArgumentPropertyValueParserRuleCall_1_0() { return cArgumentPropertyValueParserRuleCall_1_0; }
		
		//preposition=PREP?
		public Assignment getPrepositionAssignment_2() { return cPrepositionAssignment_2; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_2_0() { return cPrepositionPREPParserRuleCall_2_0; }
	}
	public class VerifyActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.bdd.BddDsl.VerifyAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateStatePhraseParserRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		
		//VerifyAction:
		//	'assure' state=StatePhrase;
		@Override public ParserRule getRule() { return rule; }
		
		//'assure' state=StatePhrase
		public Group getGroup() { return cGroup; }
		
		//'assure'
		public Keyword getAssureKeyword_0() { return cAssureKeyword_0; }
		
		//state=StatePhrase
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//StatePhrase
		public RuleCall getStateStatePhraseParserRuleCall_1_0() { return cStateStatePhraseParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ModelRefElements pModelRef;
	private final EntityDefElements pEntityDef;
	private final ActionDefElements pActionDef;
	private final PREPElements pPREP;
	private final WORDElements pWORD;
	private final StateDefElements pStateDef;
	private final StateNameElements pStateName;
	private final PropertyDefElements pPropertyDef;
	private final ID_OR_STRINGElements pID_OR_STRING;
	private final ScenarioElements pScenario;
	private final ScenarioStateElements pScenarioState;
	private final ScenarioActionElements pScenarioAction;
	private final StatePhraseElements pStatePhrase;
	private final ScenarioRefElements pScenarioRef;
	private final ENTITY_IDENTITYElements pENTITY_IDENTITY;
	private final EntityRefElements pEntityRef;
	private final EntityStatePhraseElements pEntityStatePhrase;
	private final EntityPropertyStatePhraseElements pEntityPropertyStatePhrase;
	private final PropertyValueElements pPropertyValue;
	private final SimpleValueElements pSimpleValue;
	private final ListValueElements pListValue;
	private final SetValueElements pSetValue;
	private final StringValueElements pStringValue;
	private final IntValueElements pIntValue;
	private final TRUEElements pTRUE;
	private final FALSEElements pFALSE;
	private final BooleanValueElements pBooleanValue;
	private final ActionPhraseElements pActionPhrase;
	private final VerbActionElements pVerbAction;
	private final ActionRefElements pActionRef;
	private final VerifyActionElements pVerifyAction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BddDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModelRef = new ModelRefElements();
		this.pEntityDef = new EntityDefElements();
		this.pActionDef = new ActionDefElements();
		this.pPREP = new PREPElements();
		this.pWORD = new WORDElements();
		this.pStateDef = new StateDefElements();
		this.pStateName = new StateNameElements();
		this.pPropertyDef = new PropertyDefElements();
		this.pID_OR_STRING = new ID_OR_STRINGElements();
		this.pScenario = new ScenarioElements();
		this.pScenarioState = new ScenarioStateElements();
		this.pScenarioAction = new ScenarioActionElements();
		this.pStatePhrase = new StatePhraseElements();
		this.pScenarioRef = new ScenarioRefElements();
		this.pENTITY_IDENTITY = new ENTITY_IDENTITYElements();
		this.pEntityRef = new EntityRefElements();
		this.pEntityStatePhrase = new EntityStatePhraseElements();
		this.pEntityPropertyStatePhrase = new EntityPropertyStatePhraseElements();
		this.pPropertyValue = new PropertyValueElements();
		this.pSimpleValue = new SimpleValueElements();
		this.pListValue = new ListValueElements();
		this.pSetValue = new SetValueElements();
		this.pStringValue = new StringValueElements();
		this.pIntValue = new IntValueElements();
		this.pTRUE = new TRUEElements();
		this.pFALSE = new FALSEElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pActionPhrase = new ActionPhraseElements();
		this.pVerbAction = new VerbActionElements();
		this.pActionRef = new ActionRefElements();
		this.pVerifyAction = new VerifyActionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.hal.bdd.BddDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	('model' name=ID) (modelRefs+=ModelRef | entityDefs+=EntityDef | scenarios+=Scenario)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ModelRef:
	//	'using' modelRef=[Model];
	public ModelRefElements getModelRefAccess() {
		return pModelRef;
	}
	
	public ParserRule getModelRefRule() {
		return getModelRefAccess().getRule();
	}
	
	//EntityDef:
	//	'entity' name=(ID | STRING) ('is' superEntities+=[EntityDef] (',' superEntities+=[EntityDef])*)? '{' ('actions:'
	//	actions+=ActionDef (',' actions+=ActionDef)*)? ('states:' states+=StateDef (',' states+=StateDef)*)? ('properties:'
	//	properties+=PropertyDef (',' properties+=PropertyDef)*)?
	//	'}';
	public EntityDefElements getEntityDefAccess() {
		return pEntityDef;
	}
	
	public ParserRule getEntityDefRule() {
		return getEntityDefAccess().getRule();
	}
	
	//ActionDef:
	//	name=WORD argument=WORD? (preposition=PREP? | optionalPref?='[' preposition=PREP ']');
	public ActionDefElements getActionDefAccess() {
		return pActionDef;
	}
	
	public ParserRule getActionDefRule() {
		return getActionDefAccess().getRule();
	}
	
	//PREP:
	//	'on' | 'in' | 'from' | 'to' | 'into';
	public PREPElements getPREPAccess() {
		return pPREP;
	}
	
	public ParserRule getPREPRule() {
		return getPREPAccess().getRule();
	}
	
	//WORD:
	//	ID;
	public WORDElements getWORDAccess() {
		return pWORD;
	}
	
	public ParserRule getWORDRule() {
		return getWORDAccess().getRule();
	}
	
	//StateDef:
	//	postive=StateName ('/' negative=StateName)?;
	public StateDefElements getStateDefAccess() {
		return pStateDef;
	}
	
	public ParserRule getStateDefRule() {
		return getStateDefAccess().getRule();
	}
	
	//StateName:
	//	name=WORD;
	public StateNameElements getStateNameAccess() {
		return pStateName;
	}
	
	public ParserRule getStateNameRule() {
		return getStateNameAccess().getRule();
	}
	
	//PropertyDef:
	//	name=WORD plural?='*'?;
	public PropertyDefElements getPropertyDefAccess() {
		return pPropertyDef;
	}
	
	public ParserRule getPropertyDefRule() {
		return getPropertyDefAccess().getRule();
	}
	
	////
	//ID_OR_STRING:
	//	ID | STRING;
	public ID_OR_STRINGElements getID_OR_STRINGAccess() {
		return pID_OR_STRING;
	}
	
	public ParserRule getID_OR_STRINGRule() {
		return getID_OR_STRINGAccess().getRule();
	}
	
	//Scenario:
	//	'Scenario:' name=ID_OR_STRING
	//	'given' preState=ScenarioState
	//	'when' 'I' action=ScenarioAction
	//	'then' postState=ScenarioState;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//ScenarioState:
	//	states+=StatePhrase ('and' states+=StatePhrase)*;
	public ScenarioStateElements getScenarioStateAccess() {
		return pScenarioState;
	}
	
	public ParserRule getScenarioStateRule() {
		return getScenarioStateAccess().getRule();
	}
	
	//ScenarioAction:
	//	actions+=ActionPhrase ('and' actions+=ActionPhrase)*;
	public ScenarioActionElements getScenarioActionAccess() {
		return pScenarioAction;
	}
	
	public ParserRule getScenarioActionRule() {
		return getScenarioActionAccess().getRule();
	}
	
	//StatePhrase:
	//	ScenarioRef | EntityPropertyStatePhrase | EntityStatePhrase;
	public StatePhraseElements getStatePhraseAccess() {
		return pStatePhrase;
	}
	
	public ParserRule getStatePhraseRule() {
		return getStatePhraseAccess().getRule();
	}
	
	//ScenarioRef:
	//	scenarioRef=[Scenario|ID_OR_STRING];
	public ScenarioRefElements getScenarioRefAccess() {
		return pScenarioRef;
	}
	
	public ParserRule getScenarioRefRule() {
		return getScenarioRefAccess().getRule();
	}
	
	//ENTITY_IDENTITY:
	//	'#'? (INT | STRING);
	public ENTITY_IDENTITYElements getENTITY_IDENTITYAccess() {
		return pENTITY_IDENTITY;
	}
	
	public ParserRule getENTITY_IDENTITYRule() {
		return getENTITY_IDENTITYAccess().getRule();
	}
	
	//EntityRef:
	//	'the' entity=[EntityDef|WORD] name=ENTITY_IDENTITY | name=ENTITY_IDENTITY;
	public EntityRefElements getEntityRefAccess() {
		return pEntityRef;
	}
	
	public ParserRule getEntityRefRule() {
		return getEntityRefAccess().getRule();
	}
	
	//EntityStatePhrase:
	//	entity=EntityRef 'is' state=[StateName|WORD];
	public EntityStatePhraseElements getEntityStatePhraseAccess() {
		return pEntityStatePhrase;
	}
	
	public ParserRule getEntityStatePhraseRule() {
		return getEntityStatePhraseAccess().getRule();
	}
	
	//EntityPropertyStatePhrase:
	//	'the' property=[PropertyDef|WORD] 'of' entity=EntityRef ('is' value=PropertyValue | 'are' values+=PropertyValue (','
	//	values+=PropertyValue)*);
	public EntityPropertyStatePhraseElements getEntityPropertyStatePhraseAccess() {
		return pEntityPropertyStatePhrase;
	}
	
	public ParserRule getEntityPropertyStatePhraseRule() {
		return getEntityPropertyStatePhraseAccess().getRule();
	}
	
	//PropertyValue:
	//	SimpleValue | ListValue | SetValue;
	public PropertyValueElements getPropertyValueAccess() {
		return pPropertyValue;
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}
	
	//SimpleValue:
	//	IntValue | BooleanValue | StringValue;
	public SimpleValueElements getSimpleValueAccess() {
		return pSimpleValue;
	}
	
	public ParserRule getSimpleValueRule() {
		return getSimpleValueAccess().getRule();
	}
	
	//ListValue:
	//	{ListValue} '[' (values+=SimpleValue (',' values+=SimpleValue)*)? ']';
	public ListValueElements getListValueAccess() {
		return pListValue;
	}
	
	public ParserRule getListValueRule() {
		return getListValueAccess().getRule();
	}
	
	//SetValue:
	//	{SetValue} '{' (values+=SimpleValue (',' values+=SimpleValue)*)? '}';
	public SetValueElements getSetValueAccess() {
		return pSetValue;
	}
	
	public ParserRule getSetValueRule() {
		return getSetValueAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//TRUE:
	//	'true' | 'yes';
	public TRUEElements getTRUEAccess() {
		return pTRUE;
	}
	
	public ParserRule getTRUERule() {
		return getTRUEAccess().getRule();
	}
	
	//FALSE:
	//	'false' | 'no';
	public FALSEElements getFALSEAccess() {
		return pFALSE;
	}
	
	public ParserRule getFALSERule() {
		return getFALSEAccess().getRule();
	}
	
	//BooleanValue:
	//	value=(TRUE | FALSE);
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//ActionPhrase:
	//	VerbAction | VerifyAction;
	public ActionPhraseElements getActionPhraseAccess() {
		return pActionPhrase;
	}
	
	public ParserRule getActionPhraseRule() {
		return getActionPhraseAccess().getRule();
	}
	
	//VerbAction:
	//	action=ActionRef entity=EntityRef;
	public VerbActionElements getVerbActionAccess() {
		return pVerbAction;
	}
	
	public ParserRule getVerbActionRule() {
		return getVerbActionAccess().getRule();
	}
	
	//ActionRef:
	//	verb=[ActionDef|WORD] argument=PropertyValue? preposition=PREP?;
	public ActionRefElements getActionRefAccess() {
		return pActionRef;
	}
	
	public ParserRule getActionRefRule() {
		return getActionRefAccess().getRule();
	}
	
	//VerifyAction:
	//	'assure' state=StatePhrase;
	public VerifyActionElements getVerifyActionAccess() {
		return pVerifyAction;
	}
	
	public ParserRule getVerifyActionRule() {
		return getVerifyActionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
